###
#This file is a part of the NVDA project.
#URL: http://www.nvaccess.org/
#Copyright 2021 NV Access Limited
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License version 2.0, as published by
#the Free Software Foundation.
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#This license can be found at:
#http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
###
"""
Exposes the pre-built Microsoft-UI-UIAutomation Remote Operations library
See submodule nvda-microsoft-ui-uiautomation

This library contains both a low-level winrt API, and a higher-level pure C++ API.
The outputs of this sconscript are:
* a 'lib' directory, containing:
	* microsoft.ui.uiAutomation.dll and .lib: the dll containing the low-level winrt implementation.
		To use in other code, link against the .lib, and also load the included microsoft.ui.uiAutomation.dll.manifest file into an activation context and activate it. 
	* UiaOperationAbstraction.lib: a static library containing runtime code for the higher-level pure C++ API.
		This should be linked into any compiled executable or library that needs to use the higher-level C++ API. 
* an 'include' directory, containing:
	* a 'UIAOperationAbstraction' directory containing all the public headers for the high-level C++ API
	* a 'winrt' directory containing the generated C++/winrt language bindings of the low-level API, required by the high-level C++ API headers
"""
import typing
if typing.TYPE_CHECKING:
	import SCons
	from SCons import(
		Dir,
		Import,
	)

sourceLibDir: "SCons.Node.FS.Dir"
env: "SCons.Environment.Base"

Import(
	'env',
	'sourceLibDir',
)
env: "SCons.Environment.Base" = env.Clone()

# <repoRoot>\include\nvda-microsoft-ui-uiautomation
MSUIA_sourceDir = Dir('#include/nvda-microsoft-ui-uiautomation/')

# Specify files required in the "<repoRoot>/source/lib" directory
env.Install(
	sourceLibDir,  # Target
	[  # Source
		MSUIA_sourceDir.File("lib/Microsoft.UI.UIAutomation.dll.manifest"),
		MSUIA_sourceDir.File('lib/Microsoft.UI.UIAutomation.dll'),
	]
)

# Set up includes/libs for other projects to depend on.
MSUIA_build_install = env.RecursiveInstall(
	# Source structure is expected already to be correct.
	# Copy directly to the build directory.
	Dir('.'),  # Target <repoRoot>/build/x86/microsoft-ui-uiautomation
	MSUIA_sourceDir.abspath,  # Source
)

MSUIA_lib_outDir = Dir("lib")  # <repoRoot>/build/x86/microsoft-ui-uiautomation/lib
MSUIA_include_outDir = Dir("include")  # <repoRoot>/build/x86/microsoft-ui-uiautomation/include

Return(['MSUIA_lib_outDir','MSUIA_include_outDir'])
